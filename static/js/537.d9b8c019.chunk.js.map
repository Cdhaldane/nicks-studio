{"version":3,"file":"static/js/537.d9b8c019.chunk.js","mappings":"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","sources":["services/emailStorage.js"],"sourcesContent":["// Email storage service for newsletter subscriptions\r\n// This stores data directly in a JSON file on the frontend\r\n// Note: This is for development/demo purposes only\r\n\r\nclass EmailStorageService {\r\n  constructor() {\r\n    this.dataFilePath = '/newsletter-subscribers.json';\r\n    this.baseUrl = process.env.NODE_ENV === 'development' \r\n      ? 'http://localhost:3000' \r\n      : window.location.origin;\r\n    this.init();\r\n  }\r\n\r\n  // Initialize storage with default structure\r\n  async init() {\r\n    try {\r\n      await this.getStoredData();\r\n    } catch (error) {\r\n      // If file doesn't exist or can't be read, create default structure\r\n      const defaultData = {\r\n        subscribers: [],\r\n        metadata: {\r\n          created: new Date().toISOString(),\r\n          lastUpdated: null,\r\n          totalSubscribers: 0\r\n        }\r\n      };\r\n      await this.saveToFile(defaultData);\r\n    }\r\n  }\r\n\r\n  // Get stored data from JSON file\r\n  async getStoredData() {\r\n    try {\r\n      // Try to fetch from the actual JSON file first\r\n      const response = await fetch(`${this.baseUrl}${this.dataFilePath}`);\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        console.log('üìÑ Fetched newsletter data from JSON file:', data);\r\n        return data;\r\n      }\r\n    } catch (error) {\r\n      console.log('Could not fetch from JSON file, using localStorage as fallback');\r\n    }\r\n\r\n    // Fallback to localStorage if file can't be read\r\n    try {\r\n      const data = localStorage.getItem('newsletter-subscribers');\r\n      return data ? JSON.parse(data) : null;\r\n    } catch (error) {\r\n      console.error('Error reading stored email data:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // Save data to the JSON file directly (frontend storage)\r\n  async saveToFile(data) {\r\n    try {\r\n      // Save to localStorage as backup storage\r\n      localStorage.setItem('newsletter-subscribers', JSON.stringify(data, null, 2));\r\n      \r\n      // Note: In a real frontend app, we can't write to files directly\r\n      // This is a demo implementation that updates the JSON structure\r\n      // The actual file would need to be manually updated or use a backend\r\n      console.log('üìù Newsletter data updated:', data);\r\n    } catch (error) {\r\n      console.error('Error saving email data:', error);\r\n      throw new Error('Failed to save email subscription');\r\n    }\r\n  }\r\n\r\n  // Download the updated JSON file (Admin use only)\r\n  downloadUpdatedFile(data, filename = 'newsletter-subscribers.json') {\r\n    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\r\n    const url = URL.createObjectURL(blob);\r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    link.download = filename;\r\n    link.style.display = 'none';\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n    URL.revokeObjectURL(url);\r\n    \r\n    console.log(`üìÅ ${filename} downloaded! Replace the file in /public/ to sync with frontend.`);\r\n  }\r\n\r\n  // Add new subscriber\r\n  async addSubscriber(email) {\r\n    try {\r\n      const data = await this.getStoredData() || {\r\n        subscribers: [],\r\n        metadata: { created: new Date().toISOString(), lastUpdated: null, totalSubscribers: 0 }\r\n      };\r\n\r\n      // Check if email already exists\r\n      const emailExists = data.subscribers.some(sub => sub.email.toLowerCase() === email.toLowerCase());\r\n      if (emailExists) {\r\n        throw new Error('Email already subscribed');\r\n      }\r\n\r\n      // Create new subscriber object\r\n      const newSubscriber = {\r\n        id: this.generateId(),\r\n        email: email.toLowerCase(),\r\n        subscribedAt: new Date().toISOString(),\r\n        status: 'active',\r\n        source: 'website-footer'\r\n      };\r\n\r\n      // Add to subscribers array\r\n      data.subscribers.push(newSubscriber);\r\n      data.metadata.lastUpdated = new Date().toISOString();\r\n      data.metadata.totalSubscribers = data.subscribers.length;\r\n\r\n      // Save updated data to localStorage\r\n      await this.saveToFile(data);\r\n\r\n      // Auto-download updated JSON file so you can replace it manually\r\n      this.downloadUpdatedFile(data, 'newsletter-subscribers.json');\r\n\r\n      // Update the actual JSON file structure for demo purposes\r\n      // Note: This is a frontend-only approach and has limitations\r\n      await this.updateJSONFileStructure(data);\r\n\r\n      // Simulate API delay for better UX\r\n      await new Promise(resolve => setTimeout(resolve, 800));\r\n\r\n      return {\r\n        success: true,\r\n        message: 'Successfully subscribed to newsletter',\r\n        subscriber: newSubscriber\r\n      };\r\n    } catch (error) {\r\n      console.error('Error adding subscriber:', error);\r\n      return {\r\n        success: false,\r\n        message: error.message || 'Failed to subscribe. Please try again.'\r\n      };\r\n    }\r\n  }\r\n\r\n  // Update JSON file structure (frontend demo approach)\r\n  async updateJSONFileStructure(data) {\r\n    try {\r\n      // This is a demo approach - in reality, frontend can't write to files\r\n      // For this demo, we'll show how the JSON structure should look\r\n      console.log('üóÉÔ∏è JSON structure updated with new data:', {\r\n        totalSubscribers: data.metadata.totalSubscribers,\r\n        lastSubscriber: data.subscribers[data.subscribers.length - 1]?.email\r\n      });\r\n    } catch (error) {\r\n      console.error('Error updating JSON structure:', error);\r\n    }\r\n  }\r\n\r\n  // Get all subscribers (for admin use)\r\n  async getSubscribers() {\r\n    const data = await this.getStoredData();\r\n    return data ? data.subscribers : [];\r\n  }\r\n\r\n  // Get subscriber count\r\n  async getSubscriberCount() {\r\n    const data = await this.getStoredData();\r\n    return data ? data.metadata.totalSubscribers : 0;\r\n  }\r\n\r\n  // Remove subscriber (unsubscribe)\r\n  async removeSubscriber(email) {\r\n    try {\r\n      const data = await this.getStoredData();\r\n      if (!data) return { success: false, message: 'No subscribers found' };\r\n\r\n      const initialLength = data.subscribers.length;\r\n      data.subscribers = data.subscribers.filter(sub => sub.email.toLowerCase() !== email.toLowerCase());\r\n\r\n      if (data.subscribers.length === initialLength) {\r\n        return { success: false, message: 'Email not found in subscribers list' };\r\n      }\r\n\r\n      data.metadata.lastUpdated = new Date().toISOString();\r\n      data.metadata.totalSubscribers = data.subscribers.length;\r\n\r\n      // Save updated data to localStorage and auto-download\r\n      await this.saveToFile(data);\r\n      \r\n      // Auto-download updated JSON file\r\n      this.downloadUpdatedFile(data, 'newsletter-subscribers.json');\r\n      \r\n      // Update JSON structure\r\n      await this.updateJSONFileStructure(data);\r\n\r\n      return {\r\n        success: true,\r\n        message: 'Successfully unsubscribed from newsletter'\r\n      };\r\n    } catch (error) {\r\n      console.error('Error removing subscriber:', error);\r\n      return {\r\n        success: false,\r\n        message: 'Failed to unsubscribe. Please try again.'\r\n      };\r\n    }\r\n  }\r\n\r\n  // Export subscribers data (for backup/migration) - Admin only\r\n  async exportSubscribers() {\r\n    const data = await this.getStoredData();\r\n    if (!data) return null;\r\n\r\n    const exportData = {\r\n      ...data,\r\n      exportedAt: new Date().toISOString(),\r\n      exportedBy: 'EmailStorageService'\r\n    };\r\n\r\n    // Create downloadable JSON file - only from admin\r\n    this.downloadUpdatedFile(exportData, `newsletter-subscribers-export-${new Date().toISOString().split('T')[0]}.json`);\r\n\r\n    return exportData;\r\n  }\r\n\r\n  // Admin-only method to download current data as JSON file\r\n  async downloadCurrentData() {\r\n    const data = await this.getStoredData();\r\n    if (data) {\r\n      this.downloadUpdatedFile(data, 'newsletter-subscribers.json');\r\n    }\r\n  }\r\n\r\n  // Generate unique ID for subscribers\r\n  generateId() {\r\n    return 'sub_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\r\n  }\r\n\r\n  // Validate email format\r\n  validateEmail(email) {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return emailRegex.test(email);\r\n  }\r\n\r\n  // Get analytics data\r\n  getAnalytics() {\r\n    const data = this.getStoredData();\r\n    if (!data) return null;\r\n\r\n    const now = new Date();\r\n    const thirtyDaysAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\r\n    const sevenDaysAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\r\n\r\n    const recentSubscribers30d = data.subscribers.filter(sub => \r\n      new Date(sub.subscribedAt) >= thirtyDaysAgo\r\n    ).length;\r\n\r\n    const recentSubscribers7d = data.subscribers.filter(sub => \r\n      new Date(sub.subscribedAt) >= sevenDaysAgo\r\n    ).length;\r\n\r\n    return {\r\n      totalSubscribers: data.metadata.totalSubscribers,\r\n      recentSubscribers30d,\r\n      recentSubscribers7d,\r\n      lastUpdated: data.metadata.lastUpdated,\r\n      created: data.metadata.created\r\n    };\r\n  }\r\n}\r\n\r\n// Create singleton instance\r\nconst emailStorageService = new EmailStorageService();\r\n\r\nexport default emailStorageService;\r\n"],"names":["constructor","this","dataFilePath","baseUrl","window","location","origin","init","getStoredData","error","defaultData","subscribers","metadata","created","Date","toISOString","lastUpdated","totalSubscribers","saveToFile","response","fetch","concat","ok","data","json","console","log","localStorage","getItem","JSON","parse","setItem","stringify","Error","downloadUpdatedFile","filename","arguments","length","undefined","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","style","display","body","appendChild","click","removeChild","revokeObjectURL","addSubscriber","email","some","sub","toLowerCase","newSubscriber","id","generateId","subscribedAt","status","source","push","updateJSONFileStructure","Promise","resolve","setTimeout","success","message","subscriber","_data$subscribers","lastSubscriber","getSubscribers","getSubscriberCount","removeSubscriber","initialLength","filter","exportSubscribers","exportData","exportedAt","exportedBy","split","downloadCurrentData","now","Math","random","toString","substr","validateEmail","test","getAnalytics","thirtyDaysAgo","getTime","sevenDaysAgo","recentSubscribers30d","recentSubscribers7d"],"sourceRoot":""}